/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mindcontrol;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ItemEvent;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author siva
 */
public class Trigger extends javax.swing.JPanel {

    /**
     * Creates new form Trigger
     */
    public Trigger() {
        initComponents();
        current=this;
        updatetriggerStatus("disable");
        //populate select lists
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                cmdlist.addItem("blink");
                cmdlist.addItem("meditation");
                cmdlist.addItem("attention");
                cmdlist.addItem("delta");
                cmdlist.addItem("theta");
                cmdlist.addItem("low_alpha");
                cmdlist.addItem("high_alpha");
                cmdlist.addItem("low_beta");
                cmdlist.addItem("high_beta");
                cmdlist.addItem("low_gamma");
                cmdlist.addItem("mid_gamma");
                //setVisible(true);
            }
        });
            d=MindControl.cloud;
            String list=d.getCloudconfig();
            String[] param=list.split("\n");
            if(param[0].equals("webhook"))
            {
            //disable actionlist
            actionlist.setVisible(false);
            String[] devices=param[2].split(",");
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                for(String s : devices){
                devicelist.addItem(s);
                }
            }
        });
            }   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdlist = new javax.swing.JComboBox();
        sno = new javax.swing.JLabel();
        configurebutton = new javax.swing.JButton();
        devicelist = new javax.swing.JComboBox();
        actionlist = new javax.swing.JComboBox();
        statusbutton = new javax.swing.JButton();
        statuslabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        deletebutton = new javax.swing.JButton();

        setName(""); // NOI18N
        setVerifyInputWhenFocusTarget(false);

        cmdlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdlistActionPerformed(evt);
            }
        });

        sno.setText("sno");

        configurebutton.setText("configure");
        configurebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurebuttonActionPerformed(evt);
            }
        });

        devicelist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devicelistActionPerformed(evt);
            }
        });

        actionlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionlistActionPerformed(evt);
            }
        });

        statusbutton.setText("disable");
        statusbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusbuttonActionPerformed(evt);
            }
        });

        statuslabel.setText("status");

        deletebutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
        deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sno)
                        .addGap(37, 37, 37)
                        .addComponent(cmdlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(configurebutton)
                        .addGap(82, 82, 82)
                        .addComponent(devicelist, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionlist, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statuslabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deletebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmdlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sno)
                        .addComponent(configurebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(devicelist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(actionlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(statusbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(statuslabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionlistActionPerformed
        //disable trigger
        if(c!=null){c.setFlag(true); }/*interrupt flag true stop any running threads*/
        updatetriggerStatus("disable");
        
    }//GEN-LAST:event_actionlistActionPerformed

    private void statusbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusbuttonActionPerformed
        if(c!=null){
        if(status==false && c.getConfigstatus()==true ){
            c.setFlag(false);
            updatetriggerStatus("enable");
        //call run in a new thread. run should stop itself after checking its flag
            new Thread() {
    @Override public void run () {
      c.run(current);
    }
  }.start();
            Debug.sendprintmsg("Trigger enabled.");
        }
        else if(status==true && c.getConfigstatus()==true){
            c.setFlag(true);
            updatetriggerStatus("disable");
            Debug.sendprintmsg("Trigger disabled.");
        }
        
        }    
    }//GEN-LAST:event_statusbuttonActionPerformed

    private void configurebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurebuttonActionPerformed
        //disable trigger
        if(c!=null){c.setFlag(true); }/*interrupt flag true stop any running threads*/
        updatetriggerStatus("disable");
        //reset config status
        if(c!=null){c.setConfigstatus(false); }
         SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
            configurebutton.setBackground(Color.gray);
               }
      });
        //start configview
        new Thread() {
    @Override public void run () {
    c.setCmdconfig();
    while(!c.getConfigstatus()){try {
                  Thread.sleep(1000);/*Debug.sendprintmsg("configuring..");*/
           } catch (InterruptedException ex) {}
        }
      Debug.sendprintmsg("Trigger configured.");
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
          //updateUI(); // <----- repaint? revalidate? what?
            configurebutton.setBackground(Color.cyan);
               }
      });
          }
  }.start();
    }//GEN-LAST:event_configurebuttonActionPerformed

    private void deletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebuttonActionPerformed
    delete();
    }//GEN-LAST:event_deletebuttonActionPerformed

    private void cmdlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdlistActionPerformed
        //disable trigger
        if(c!=null){c.setFlag(true); }/*interrupt flag true stop any running threads*/
        updatetriggerStatus("disable");
         //reset config status not required coz we're creating new object
        //reset configbutton
        Debug.sendprintmsg("Trigger eeg command changed. Please reconfigure.");
           SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
            configurebutton.setBackground(Color.gray);
               }
      });
      selectedcmd=(String) cmdlist.getItemAt(cmdlist.getSelectedIndex());
      if(selectedcmd.equals("blink"))
      {
      c=new BlinkCommand();
      }
      else if(selectedcmd.equals("meditation"))
      {
      c=new MeditationCommand();
      }
      else if(selectedcmd.equals("attention"))
      {
      c=new AttentionCommand();
      }
      else if(selectedcmd.equals("delta"))
      {
      c=new DeltaCommand();
      }
      else if(selectedcmd.equals("theta"))
      {
      c=new ThetaCommand();
      }
      else if(selectedcmd.equals("low_alpha"))
      {
      c=new Low_alphaCommand();
      }
      else if(selectedcmd.equals("high_alpha"))
      {
      c=new High_alphaCommand();
      }
      else if(selectedcmd.equals("low_beta"))
      {
      c=new Low_betaCommand();
      }
      else if(selectedcmd.equals("high_beta"))
      {
      c=new High_betaCommand();
      }
      else if(selectedcmd.equals("low_gamma"))
      {
      c=new Low_gammaCommand();
      }
      else if(selectedcmd.equals("mid_gamma"))
      {
      c=new Mid_gammaCommand();
      }
        Debug.sendprintmsg("selected: "+selectedcmd);
    }//GEN-LAST:event_cmdlistActionPerformed

    private void devicelistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devicelistActionPerformed
        //disable trigger
        if(c!=null){c.setFlag(true); }/*interrupt flag true stop any running threads*/
        updatetriggerStatus("disable");
        
    }//GEN-LAST:event_devicelistActionPerformed
    public void setSno(int i){
    sno.setText(String.valueOf(i));
    } 
    public void delete(){
         new Thread() {
    @Override public void run () {
      if(c!=null){c.setFlag(true); }/*interrupt flag true stop any running threads*/
      MindControl.removeTrigger(current);
    }
  }.start();
    }
    
 public void updatetriggerStatus(String str)
    {
        if(str.equals("enable"))
        {
         status=true;
                  java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
         //eegimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/connected.jpg"));
         //eegstatusicon.setIcon(eegimg);
         statuslabel.setText("enabled");
         statusbutton.setText("disable");
          }
        });
        }
        else if(str.equals("disable")){
         status=false;
                  java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
         //eegimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/disconnected.jpg"));
         //eegstatusicon.setIcon(eegimg);
         statuslabel.setText("disabled");
         statusbutton.setText("enable");
           }
        });
        } 
    }

 public void fire()
 {
     if(d.getCloudname().equals("webhook")){
     selecteddevice=(String) devicelist.getItemAt(devicelist.getSelectedIndex());
     //fire device in a new thread.
               new Thread() {
    @Override public void run () {
       d.run(selecteddevice);
    }
  }.start();
      Debug.sendprintmsg(selecteddevice+"  has been fired.");
      MindControl.outputtext.setText(selecteddevice+" fired");
     }
 }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox actionlist;
    private javax.swing.JComboBox cmdlist;
    private javax.swing.JButton configurebutton;
    private javax.swing.JButton deletebutton;
    private javax.swing.JComboBox devicelist;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel sno;
    private javax.swing.JButton statusbutton;
    private javax.swing.JLabel statuslabel;
    // End of variables declaration//GEN-END:variables
public boolean status;
public Command c;
public static Cloud d;
private String selectedcmd;
private String selecteddevice;
private Trigger current;


}
