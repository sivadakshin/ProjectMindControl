/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mindcontrol;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author siva
 */
public class MindControl extends javax.swing.JFrame {

    /**
     * Creates new form MindControl
     */
    public MindControl() {
        eegmachine=null;
        cloud=null;
        triggers=new ArrayList<Trigger>();
        initComponents();
        setLocationRelativeTo(null);
        updateeegStatus("disconnected");
        updatecloudStatus("disconnected");
        SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
        addtriggerbutton.setVisible(false);
        outputlabel.setVisible(false);
        outputtext.setVisible(false);
        content.setVisible(false);
        //test
        scrollpanel = new javax.swing.JScrollPane(content);
        scrollpanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollpanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);        
        scrollpanel.setBounds(134,200,730, 565);
        scrollpanel.getVerticalScrollBar().setUnitIncrement(20);
        add(scrollpanel);
        Debug.initDebugger();
        }
      });
     // jLabel1 = new JLabel(new ImageIcon(getClass().getClassLoader().getResource("resources/connected.jpg")));
//eegconnectbutton.setIcon(eegimg);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eegstatusicon = new javax.swing.JLabel();
        eegstatuslabel = new javax.swing.JLabel();
        h1 = new javax.swing.JLabel();
        eegconnectbutton = new javax.swing.JButton();
        cloudconnectbutton = new javax.swing.JButton();
        cloudstatusicon = new javax.swing.JLabel();
        cloudstatuslabel = new javax.swing.JLabel();
        h2 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        visualize = new javax.swing.JButton();
        debug = new javax.swing.JButton();
        content = new javax.swing.JPanel();
        errormsglabel = new javax.swing.JLabel();
        addtriggerbutton = new javax.swing.JButton();
        outputlabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        outputtext = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project MindControl");
        setPreferredSize(new java.awt.Dimension(1024, 760));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        eegstatusicon.setText("eegstatusicon");

        eegstatuslabel.setText("eegstatuslabel");

        h1.setText("EEG DEVICE");

        eegconnectbutton.setText("Connect");
        eegconnectbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eegconnectbuttonActionPerformed(evt);
            }
        });

        cloudconnectbutton.setText("Connect");
        cloudconnectbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cloudconnectbuttonActionPerformed(evt);
            }
        });

        cloudstatusicon.setText("cloudstatusicon");

        cloudstatuslabel.setText("cloudstatuslabel");

        h2.setText("CLOUD");
        h2.setToolTipText("");

        title.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("PROJECT MINDCONTROL, BY siva");

        visualize.setText("Visualise");
        visualize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizeActionPerformed(evt);
            }
        });

        debug.setText("Debug");
        debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugActionPerformed(evt);
            }
        });

        content.setPreferredSize(new java.awt.Dimension(710, 1300));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 710, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );

        errormsglabel.setBackground(new java.awt.Color(51, 0, 51));
        errormsglabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errormsglabel.setForeground(new java.awt.Color(255, 0, 0));
        errormsglabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errormsglabel.setText("To start , Connect both EEG Machine and Cloud");

        addtriggerbutton.setText("Add");
        addtriggerbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtriggerbuttonActionPerformed(evt);
            }
        });

        outputlabel.setText("output: ");

        outputtext.setBackground(new java.awt.Color(0, 0, 0));
        outputtext.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        outputtext.setForeground(new java.awt.Color(0, 220, 0));
        outputtext.setText("outputtext");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSeparator2)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(eegstatuslabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addtriggerbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(h1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(eegstatusicon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(eegconnectbutton)))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(errormsglabel, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(visualize, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(101, 101, 101)
                                        .addComponent(debug, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(outputlabel)
                                        .addGap(42, 42, 42)
                                        .addComponent(outputtext, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(cloudstatuslabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(h2)
                                            .addComponent(cloudstatusicon, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(cloudconnectbutton))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(visualize)
                            .addComponent(debug)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(h1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eegstatusicon, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eegconnectbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eegstatuslabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(h2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cloudstatusicon, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cloudconnectbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cloudstatuslabel))
                            .addComponent(title))
                        .addGap(3, 3, 3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(outputlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputtext, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(errormsglabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(addtriggerbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugActionPerformed
      Debug.debugview.setVisible(true);
    }//GEN-LAST:event_debugActionPerformed

    private void eegconnectbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eegconnectbuttonActionPerformed
      if(eegconnectbutton.getText().equals("connect")){
          eegmachine=new EegMachine();
          new Thread() {
    @Override public void run () {
      //callWebService();
       eegmachine.setup();
      //do stuff
      while(EegMachine.running!=true){try {
          Thread.sleep(1000);
           } catch (InterruptedException ex) {}
}
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
          //updateUI(); // <----- repaint? revalidate? what?
        updateeegStatus("...");      
        updateeegStatus("connected");
        Debug.sendprintmsg("EEG Machine Connected!");
        //check other status
        if(cloudstatuslabel.getText().equals("disconnected"))
        errormsglabel.setText("Connect a cloud service");
        else if(cloudstatuslabel.getText().equals("connected"))
        {
        errormsglabel.setText("Both Connected");
        addtriggerbutton.setVisible(true);
        outputlabel.setVisible(true);
        outputtext.setVisible(true);
        content.setVisible(true);
        }
        }
      });
    }
  }.start();
      }
        
      else if(eegconnectbutton.getText().equals("disconnect")){
              new Thread() {
    @Override public void run () {
      //callWebService();
       eegmachine.stop();
      //do stuff
       while(EegMachine.running!=false){try {
           Thread.sleep(1000);
           } catch (InterruptedException ex) {}
}
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
          //updateUI(); // <----- repaint? revalidate? what?
            updateeegStatus("...");
            //after thread had stopped
        updateeegStatus("disconnected");
        Debug.sendprintmsg("EEG Machine Disconnected!");
        //check other status
        if(cloudstatuslabel.getText().equals("disconnected"))
        errormsglabel.setText("To start , Connect both EEG Machine and Cloud");
        else if(cloudstatuslabel.getText().equals("connected"))
        {
        errormsglabel.setText("Connect The EEG Machine");
        addtriggerbutton.setVisible(false);
        outputlabel.setVisible(false);
        outputtext.setVisible(false);
        content.setVisible(false);
        }
        }
      });
    }
  }.start(); 
      }   
    }//GEN-LAST:event_eegconnectbuttonActionPerformed
//if cloud is disconnected, Remove all triggers!!!
    private void cloudconnectbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cloudconnectbuttonActionPerformed
        if(cloudconnectbutton.getText().equals("connect")){
          new Thread() {
    @Override public void run () {
      //callWebService();
       new CloudView().setup();
      //do stuff
              while(cloud==null){try {
                  Thread.sleep(1000);/*Debug.sendprintmsg("waiting for cloudconfig")*/
           } catch (InterruptedException ex) {}
;}
              while(!cloud.isConfigured()){try {
                  Thread.sleep(1000);/*Debug.sendprintmsg("configuring..");*/
           } catch (InterruptedException ex) {}
}
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
          //updateUI(); // <----- repaint? revalidate? what?
            updatecloudStatus("...");
               
        //System.out.println(cloud.isConfigured());
            updatecloudStatus("connected");
         Debug.sendprintmsg("Cloud Service Connected!");
         //check other status
        if(eegstatuslabel.getText().equals("disconnected"))
        errormsglabel.setText("Connect The EEG Machine");
        else if(eegstatuslabel.getText().equals("connected"))
        {
        errormsglabel.setText("Both Connected");
        addtriggerbutton.setVisible(true);
        outputlabel.setVisible(true);
        outputtext.setVisible(true);
        content.setVisible(true);
        }
//show triggers

//over test
        }
      });
    }
  }.start();
      }
        
      else if(cloudconnectbutton.getText().equals("disconnect")){
              new Thread() {
    @Override public void run () {
      //callWebService();
       cloud=null;
      //do stuff
      while(cloud!=null){}
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
          //updateUI(); // <----- repaint? revalidate? what?
            updatecloudStatus("...");
            //after thread had stopped
        updatecloudStatus("disconnected");
        Debug.sendprintmsg("Cloud Service Disconnected!");
        //removing all triggers
        removeallTriggers();
          //check other status
        if(eegstatuslabel.getText().equals("disconnected")){
        errormsglabel.setText("To start , Connect both EEG Machine and Cloud");
        }
        else if(eegstatuslabel.getText().equals("connected"))
        {
        errormsglabel.setText("Connect a cloud service");
        addtriggerbutton.setVisible(false);
        outputlabel.setVisible(false);
        outputtext.setVisible(false);
        content.setVisible(false);
        }
        }
      });
    }
  }.start(); 
      }
        
    }//GEN-LAST:event_cloudconnectbuttonActionPerformed

    public static void repaintTriggers()
    {
     new Thread() {
    @Override public void run () {
        
        SwingUtilities.invokeLater(new Runnable(){
        @Override public void run() {
        if(triggers!=null){
        int i=60,j=0;
        content.removeAll();
        JPanel header=new TriggerHeader();
        header.setBounds(0,0,700,70);
        content.add(header);
        for(Trigger obj : triggers){
            obj.setBounds(0,i,700,70);
            obj.setSno(++j);
            i+=60;
        content.add(obj);
        //System.out.println(obj);
        }
          content.revalidate();
          content.repaint();
        Debug.sendprintmsg("Total components in content:"+(content.getComponentCount()-1));
       // getContentPane().add(obj );
        } 
           }
      });
    }
  }.start();
    }
    private void visualizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeActionPerformed
         Plot.setupchart();
         Plot.showchart();
         Debug.sendprintmsg("Visualization ON. Please don't close the chart frame.");
    }//GEN-LAST:event_visualizeActionPerformed

    private void addtriggerbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtriggerbuttonActionPerformed
        // add new trigger
        if(!(triggers.size() >= 20)){
        Trigger t=new Trigger();
        triggers.add(t);
        repaintTriggers();
        Debug.sendprintmsg("Trigger added successfully.");
        }
        else{
        Debug.sendprintmsg("Trigger cant be added exeded maximum limit.");
        }
    }//GEN-LAST:event_addtriggerbuttonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            //remove all triggers
            removeallTriggers();
        } catch (Exception e){}
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void removeTrigger(Trigger r){
    triggers.remove(r);
    Debug.sendprintmsg("Triggers size after remove:"+triggers.size());
    repaintTriggers();
    Debug.sendprintmsg("Trigger removed successfully.");
    }
    
public static void removeallTriggers(){
     for(int i=triggers.size()-1;i>=0;i--){
     Trigger trigger=triggers.get(i);
     trigger.delete();
     }
     Debug.sendprintmsg("All triggers removed.");
}

    public static void updateeegStatus(String str)
    {
        if(str.equals("connected"))
        {
         eegimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/connected.jpg"));
         eegstatusicon.setIcon(eegimg);
         eegstatuslabel.setText("connected");
         eegconnectbutton.setText("disconnect");
        }
        else if(str.equals("disconnected")){
         eegimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/disconnected.jpg"));
         eegstatusicon.setIcon(eegimg);
         eegstatuslabel.setText("disconnected");
         eegconnectbutton.setText("connect");
        }
         else if(str.equals("...")){
         eegimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/disconnected.jpg"));
         //eegstatusicon.setIcon(eegimg);
         //eegstatuslabel.setText("disconnected");
         eegconnectbutton.setText("...");
        }
           
    }
        public static void updatecloudStatus(String str)
    {
        if(str.equals("connected"))
        {
         cloudimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/connected.jpg"));
         cloudstatusicon.setIcon(cloudimg);
         cloudstatuslabel.setText("connected");
         cloudconnectbutton.setText("disconnect");
        }
        else if(str.equals("disconnected")){
         cloudimg = new ImageIcon(MindControl.class.getClassLoader().getResource("resources/disconnected.jpg"));
         cloudstatusicon.setIcon(cloudimg);
         cloudstatuslabel.setText("disconnected");
         cloudconnectbutton.setText("connect");
        }
           
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MindControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MindControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MindControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MindControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MindControl().setVisible(true);
                
            }
        });
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtriggerbutton;
    private static javax.swing.JButton cloudconnectbutton;
    private static javax.swing.JLabel cloudstatusicon;
    private static javax.swing.JLabel cloudstatuslabel;
    private static javax.swing.JPanel content;
    private javax.swing.JButton debug;
    private static javax.swing.JButton eegconnectbutton;
    private static javax.swing.JLabel eegstatusicon;
    private static javax.swing.JLabel eegstatuslabel;
    private javax.swing.JLabel errormsglabel;
    private static javax.swing.JLabel h1;
    private static javax.swing.JLabel h2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel outputlabel;
    public static javax.swing.JLabel outputtext;
    private javax.swing.JLabel title;
    private javax.swing.JButton visualize;
    // End of variables declaration//GEN-END:variables
 private EegMachine eegmachine;
 public static ImageIcon eegimg;
 public static ImageIcon cloudimg;
 public static Cloud cloud;
 public static ArrayList<Trigger> triggers;
 JScrollPane scrollpanel;
//private Box eegstatus;
}
